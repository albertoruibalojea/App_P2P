package client;

import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.rmi.RemoteException;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import server.User;
import server.IServer;

public class Chat extends javax.swing.JFrame {

    private IServer iface;
    private User user;
    private String password;
    //<FriendName, Conversations>
    private HashMap<String, ArrayList<String>> conversations;
    private FriendRequest friendRequest;

    public Chat(User user, IServer iface, String password) throws GeneralSecurityException {
        initComponents();
        this.requestLabel.setVisible(false);
        this.setLocationRelativeTo(null);
        this.screenName.setText(user.getName());
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                try {
                    exitUser();
                } catch (GeneralSecurityException ex) {
                    Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        this.conversations = new HashMap();
        try {
            this.iface = iface;
            this.user = user;
            this.password = password;
            IChat icli = new ChatImplements(this);
            this.user.setIface(icli);
            this.iface.registerCallback(this.user, this.password);
            this.updateFriendsList();
            this.PendingFriendRequest();
            
        } catch (RemoteException ex) {
            System.out.println("Error registering the new user window" + ex);
        }
    }

    public HashMap<String, ArrayList<String>> getConversations() {
        return conversations;
    }

    public User getUser() {
        return user;
    }
    
    public IServer getIface() {
        return iface;
    }
    
    public String getPassword(){
        return password;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        friendsList = new javax.swing.JList<>();
        addFriendField = new javax.swing.JTextField();
        addFriendButton = new javax.swing.JButton();
        chatPanel = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        sendLabel = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pendingRequestsButton = new javax.swing.JButton();
        changePasswordButton = new javax.swing.JButton();
        requestLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        screenName = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        friendsList.setModel(new DefaultListModel()
        );
        friendsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(friendsList);

        addFriendField.setText("Friend name");
        addFriendField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addFriendFieldMouseClicked(evt);
            }
        });

        addFriendButton.setText("ADD FRIEND");
        addFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendButtonActionPerformed(evt);
            }
        });

        sendLabel.setColumns(20);
        sendLabel.setRows(5);
        jScrollPane2.setViewportView(sendLabel);

        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Online friends");

        pendingRequestsButton.setText("PENDING REQUESTS");
        pendingRequestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingRequestsButtonActionPerformed(evt);
            }
        });

        changePasswordButton.setText("CHANGE");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });

        requestLabel.setForeground(new java.awt.Color(41, 165, 0));
        requestLabel.setText("Friend request sent");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Friendship Requests");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Change password");

        screenName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        screenName.setText("jLabel4");

        passwordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(screenName)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(chatPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel1)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(87, 87, 87)
                                        .addComponent(requestLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pendingRequestsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(addFriendButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                                        .addComponent(addFriendField, javax.swing.GroupLayout.Alignment.LEADING)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(changePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))))))))
                        .addGap(46, 46, 46))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(screenName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addFriendField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addFriendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestLabel)
                        .addGap(15, 15, 15)
                        .addComponent(pendingRequestsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendButtonActionPerformed
        try {
            if (!this.user.getFriends().contains(new User(this.addFriendField.getText()))) {
                this.iface.friendRequest(this.user, this.password, this.user.getName(), this.addFriendField.getText());
                this.addFriendField.setText("");
                this.requestLabel.setVisible(true);
            }
        } catch (RemoteException | GeneralSecurityException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addFriendButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        this.requestLabel.setVisible(false);
        String text = this.sendLabel.getText();
        if( ( ((JScrollPane) this.chatPanel.getSelectedComponent() ) ) != null){
            String name = ((JTextPane) ((JScrollPane) this.chatPanel.getSelectedComponent()).getViewport().getComponent(0)).getName();
            for (User user : this.user.getFriends()) {
                if (user.getName() != null && user.getName().equals(name)) {
                    if(user.getIface() != null) {
                        try {
                            user.getIface().sendMessage(this.user.getName(), text);
                            this.updateChat(name, text, true);
                        } catch (RemoteException ex) {
                            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else JOptionPane.showMessageDialog(null, name + " isn´t connected :(", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            this.sendLabel.setText("");
        } else JOptionPane.showMessageDialog(null, "Please select a friend chat", "Warning", JOptionPane.WARNING_MESSAGE);
        
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * With this event, we open a new Chat Panel with the selected user
     */
    private void friendsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendsListMouseClicked
        String friendName = this.friendsList.getSelectedValue();
        if (friendName != null) {
            if (friendName.charAt(0) == '@') {
                friendName = friendName.replace("@", "");
                if (this.conversations.containsKey(friendName)) {
                    Boolean b = false;
                    for (Component c : this.chatPanel.getComponents()) {
                        String name = ((JTextPane) (((JScrollPane) c).getViewport().getComponent(0))).getName();
                        if (name != null && name.equals(friendName)) {
                            this.chatPanel.setSelectedComponent(c);
                            b = true;
                        }
                    }
                    if (!b) {
                        this.createNewChat(friendName);
                    }
                } else {
                    this.conversations.put(friendName, new ArrayList());
                }
            }
        }
    }//GEN-LAST:event_friendsListMouseClicked

    private void addFriendFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addFriendFieldMouseClicked
        this.addFriendField.setText("");
    }//GEN-LAST:event_addFriendFieldMouseClicked

    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        if (passwordField.getText() != null) {
            CheckPassword check = new CheckPassword(this.user.getName(), this.passwordField.getText(), this);
            check.setVisible(true);
            this.passwordField.setText("");
        }
    }//GEN-LAST:event_changePasswordButtonActionPerformed

    /**
     * Check if there is a new friend request
     */
    private void pendingRequestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingRequestsButtonActionPerformed
        try {
            this.PendingFriendRequest();
        } catch (GeneralSecurityException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pendingRequestsButtonActionPerformed

    private void passwordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordFieldMouseClicked
        this.passwordField.setText("");
    }//GEN-LAST:event_passwordFieldMouseClicked

    /*
     * Check if there is a new Friend request
     */
    public void PendingFriendRequest() throws GeneralSecurityException{
        try {
            this.iface.updateUser(this.user, this.password);
        } catch (RemoteException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*
     * Method to print new friend messages
     */
    public void printFriendMessage(String friendName, StyledDocument document, String message) {
        try {
            document.insertString(document.getLength(), friendName + ": " + message + "\n", null);
        } catch (BadLocationException ex) {
            System.out.println("Can´t print the message: " + ex);
        }
    }

    /*
     * Method to print new user messages
     */
    public void printUserMessage(StyledDocument document, String message) {
        try {
            document.insertString(document.getLength(), "\t\t\t\t\t" + this.user.getName() + ": " + message + "\n", null);
        } catch (BadLocationException ex) {
            System.out.println("Can´t print the message: " + ex);
        }
    }
    
    /*
     * Logout of the user
     */
    private void exitUser() throws GeneralSecurityException {
        try {
            this.iface.deleteCallback(this.user, this.password);
            System.exit(0);
        } catch (RemoteException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*
     * Creates a new friend request
     */
    public void createFriendRequest(String nombre) {
        if (!nombre.equals(this.user.getName())) {
            this.friendRequest = new FriendRequest(this, nombre);
            this.friendRequest.setVisible(true);
        }
    }

    /*
     * When a new Friend is logged in, by example, or when you accept a friend request
     */
    public void updateFriendsList() {
        DefaultListModel list = (DefaultListModel) this.friendsList.getModel();
        list.clear();
        if (this.user.getFriends() == null) {
            this.user.setFriends(new ArrayList());
        }
        for (User u : this.user.getFriends()) {
            if (this.user.isMyFriendConnected(u.getName())) {
                list.addElement("@" + u.getName());
            } else {
                list.addElement(u.getName());
            }
        }
    }

    /**
     * Receives a new message, adding it to the chat panel with this user if
     * exists If not, it creates a new one
     *
     * @param friendName
     * @param message
     */
    public void receiveMessage(String friendName, String message) {
        if (this.conversations.get(friendName) == null) {
            this.conversations.put(friendName, new ArrayList());
            this.conversations.get(friendName).add(friendName + ": " + message);
        } else {
            this.conversations.get(friendName).add(friendName + ": " + message);
        }
        JTextPane panel = null;

        for (Component c : this.chatPanel.getComponents()) {
            panel = ((JTextPane) ((JScrollPane) c).getViewport().getComponent(0));
        }
        if (panel != null && panel.getName() != null && panel.getName().equals(friendName)) {
            this.updateChat(friendName, message, false);
        } else {
            this.createNewChat(friendName);
            this.updateChat(friendName, message, false);
        }

    }

    /*
     * Updates the conversations
     */
    public void actualizarChats() {
        Set<String> keys = this.conversations.keySet();

        for (String i : keys) {
            JTextPane txt = new JTextPane();
            txt.setEditable(false);
            JScrollPane scroll = new JScrollPane();
            scroll.setViewportView(txt);
            scroll.setName(i);
            this.chatPanel.add(i, scroll);
        }
    }

    /**
     * This method is being used by receiveMessage() to update the chat
     *
     * @param name
     * @param message
     * @param user
     */
    public void updateChat(String name, String message, Boolean user) {
        for (Component c : this.chatPanel.getComponents()) {
            JTextPane aux = (JTextPane) ((JScrollPane) c).getViewport().getComponent(0);
            if (aux.getName() != null && aux.getName().equals(name)) {
                StyledDocument doc = aux.getStyledDocument();

                //If true, the user is sending the message
                if (user) {
                    this.printUserMessage(doc, message);
                    if (this.conversations.get(name) != null) {
                        this.conversations.get(name).add("@" + message);
                    }
                    //Else is sent by the friend
                } else {
                    this.printFriendMessage(name, doc, message);
                    this.conversations.get(name).add(message);
                }
            }
        }
    }

    /*
     * Creates a new Chat Panel with another user
     */
    public void createNewChat(String friendName) {
        ArrayList<String> a = new ArrayList();
        this.conversations.put(friendName, a);

        JTextPane txt = new JTextPane();
        txt.setName(friendName);
        JScrollPane scroll = new JScrollPane();
        scroll.setViewportView(txt);
        chatPanel.addTab(friendName, scroll);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFriendButton;
    private javax.swing.JTextField addFriendField;
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JTabbedPane chatPanel;
    private javax.swing.JList<String> friendsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton pendingRequestsButton;
    private javax.swing.JLabel requestLabel;
    private javax.swing.JLabel screenName;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea sendLabel;
    // End of variables declaration//GEN-END:variables
}
